#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file './annotation_tool.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

# Import Libraries
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5 import QtCore, QtGui, QtWidgets
import ast
import pandas as pd
from pymongo import MongoClient

class Ui_Dialog(object):
    def setupUi(self, Dialog):
        """
        Class to initialize dialog

        Description:
        ============
        This method is used to initialize dialog for subject app
        """
        Dialog.setObjectName("Dialog")
        Dialog.resize(911, 735)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("./logo.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Dialog.setWindowIcon(icon)
        self.db_connect = QtWidgets.QTabWidget(Dialog)
        self.db_connect.setGeometry(QtCore.QRect(10, 10, 891, 721))
        self.db_connect.setUsesScrollButtons(True)
        self.db_connect.setDocumentMode(True)
        self.db_connect.setObjectName("db_connect")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.label = QtWidgets.QLabel(self.tab)
        self.label.setGeometry(QtCore.QRect(10, 140, 231, 16))
        self.label.setObjectName("label")
        self.layoutWidget = QtWidgets.QWidget(self.tab)
        self.layoutWidget.setGeometry(QtCore.QRect(10, 160, 282, 25))
        self.layoutWidget.setObjectName("layoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.layoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.addr_label = QtWidgets.QLabel(self.layoutWidget)
        self.addr_label.setObjectName("addr_label")
        self.horizontalLayout.addWidget(self.addr_label)
        self.address_bar = QtWidgets.QLineEdit(self.layoutWidget)
        self.address_bar.setToolTip("")
        self.address_bar.setObjectName("address_bar")
        self.horizontalLayout.addWidget(self.address_bar)
        self.db_connect_button = QtWidgets.QPushButton(self.layoutWidget)
        self.db_connect_button.setToolTip("")
        self.db_connect_button.setObjectName("db_connect_button")
        self.horizontalLayout.addWidget(self.db_connect_button)
        self.layoutWidget1 = QtWidgets.QWidget(self.tab)
        self.layoutWidget1.setGeometry(QtCore.QRect(10, 190, 281, 25))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.layoutWidget1)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.colection_selector_label = QtWidgets.QLabel(self.layoutWidget1)
        self.colection_selector_label.setObjectName("colection_selector_label")
        self.horizontalLayout_2.addWidget(self.colection_selector_label)
        self.collection_selector_combo = QtWidgets.QComboBox(self.layoutWidget1)
        self.collection_selector_combo.setToolTip("")
        self.collection_selector_combo.setMaxVisibleItems(50)
        self.collection_selector_combo.setObjectName("collection_selector_combo")
        self.horizontalLayout_2.addWidget(self.collection_selector_combo)
        self.collection_selector_button = QtWidgets.QPushButton(self.layoutWidget1)
        self.collection_selector_button.setToolTip("")
        self.collection_selector_button.setObjectName("collection_selector_button")
        self.horizontalLayout_2.addWidget(self.collection_selector_button)
        self.layoutWidget2 = QtWidgets.QWidget(self.tab)
        self.layoutWidget2.setGeometry(QtCore.QRect(10, 220, 281, 25))
        self.layoutWidget2.setObjectName("layoutWidget2")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.layoutWidget2)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.channel_selector_label = QtWidgets.QLabel(self.layoutWidget2)
        self.channel_selector_label.setObjectName("channel_selector_label")
        self.horizontalLayout_3.addWidget(self.channel_selector_label)
        self.channel_selector_combo = QtWidgets.QComboBox(self.layoutWidget2)
        self.channel_selector_combo.setToolTip("")
        self.channel_selector_combo.setObjectName("channel_selector_combo")
        self.horizontalLayout_3.addWidget(self.channel_selector_combo)
        self.annot_starter = QtWidgets.QPushButton(self.layoutWidget2)
        self.annot_starter.setToolTip("")
        self.annot_starter.setObjectName("annot_starter")
        self.horizontalLayout_3.addWidget(self.annot_starter)
        self.layoutWidget3 = QtWidgets.QWidget(self.tab)
        self.layoutWidget3.setGeometry(QtCore.QRect(310, 160, 191, 80))
        self.layoutWidget3.setObjectName("layoutWidget3")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.layoutWidget3)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.db_connect_meta_label = QtWidgets.QLabel(self.layoutWidget3)
        self.db_connect_meta_label.setObjectName("db_connect_meta_label")
        self.verticalLayout.addWidget(self.db_connect_meta_label)
        self.db_meta_label = QtWidgets.QLabel(self.layoutWidget3)
        self.db_meta_label.setObjectName("db_meta_label")
        self.verticalLayout.addWidget(self.db_meta_label)
        self.db_meta_collection_label = QtWidgets.QLabel(self.layoutWidget3)
        self.db_meta_collection_label.setObjectName("db_meta_collection_label")
        self.verticalLayout.addWidget(self.db_meta_collection_label)
        self.de_meta_channel_label = QtWidgets.QLabel(self.layoutWidget3)
        self.de_meta_channel_label.setObjectName("de_meta_channel_label")
        self.verticalLayout.addWidget(self.de_meta_channel_label)
        self.layoutWidget4 = QtWidgets.QWidget(self.tab)
        self.layoutWidget4.setGeometry(QtCore.QRect(520, 160, 92, 80))
        self.layoutWidget4.setObjectName("layoutWidget4")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.layoutWidget4)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.db_connect_meta_status = QtWidgets.QLabel(self.layoutWidget4)
        self.db_connect_meta_status.setObjectName("db_connect_meta_status")
        self.verticalLayout_2.addWidget(self.db_connect_meta_status)
        self.db_meta_name = QtWidgets.QLabel(self.layoutWidget4)
        self.db_meta_name.setObjectName("db_meta_name")
        self.verticalLayout_2.addWidget(self.db_meta_name)
        self.db_meta_collection = QtWidgets.QLabel(self.layoutWidget4)
        self.db_meta_collection.setObjectName("db_meta_collection")
        self.verticalLayout_2.addWidget(self.db_meta_collection)
        self.db_meta_channel = QtWidgets.QLabel(self.layoutWidget4)
        self.db_meta_channel.setObjectName("db_meta_channel")
        self.verticalLayout_2.addWidget(self.db_meta_channel)
        self.widget = QtWidgets.QWidget(self.tab)
        self.widget.setGeometry(QtCore.QRect(10, 10, 529, 122))
        self.widget.setObjectName("widget")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.connector_heading = QtWidgets.QLabel(self.widget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.connector_heading.setFont(font)
        self.connector_heading.setObjectName("connector_heading")
        self.verticalLayout_3.addWidget(self.connector_heading)
        self.connector_head_d1 = QtWidgets.QLabel(self.widget)
        self.connector_head_d1.setObjectName("connector_head_d1")
        self.verticalLayout_3.addWidget(self.connector_head_d1)
        self.connector_head_d2 = QtWidgets.QLabel(self.widget)
        self.connector_head_d2.setObjectName("connector_head_d2")
        self.verticalLayout_3.addWidget(self.connector_head_d2)
        self.connector_head_d3 = QtWidgets.QLabel(self.widget)
        self.connector_head_d3.setObjectName("connector_head_d3")
        self.verticalLayout_3.addWidget(self.connector_head_d3)
        self.connector_head_d4 = QtWidgets.QLabel(self.widget)
        self.connector_head_d4.setObjectName("connector_head_d4")
        self.verticalLayout_3.addWidget(self.connector_head_d4)
        self.label_2 = QtWidgets.QLabel(self.widget)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_3.addWidget(self.label_2)
        self.db_connect.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.current_frame_label = QtWidgets.QLabel(self.tab_2)
        self.current_frame_label.setGeometry(QtCore.QRect(10, 10, 420, 315))
        self.current_frame_label.setAlignment(QtCore.Qt.AlignCenter)
        self.current_frame_label.setObjectName("current_frame_label")
        self.feedback_frame_label = QtWidgets.QLabel(self.tab_2)
        self.feedback_frame_label.setGeometry(QtCore.QRect(450, 10, 420, 315))
        self.feedback_frame_label.setAlignment(QtCore.Qt.AlignCenter)
        self.feedback_frame_label.setObjectName("feedback_frame_label")
        self.feedback_slider = QtWidgets.QSlider(self.tab_2)
        self.feedback_slider.setGeometry(QtCore.QRect(550, 330, 321, 21))
        self.feedback_slider.setToolTip("")
        self.feedback_slider.setOrientation(QtCore.Qt.Horizontal)
        self.feedback_slider.setObjectName("feedback_slider")
        self.layoutWidget5 = QtWidgets.QWidget(self.tab_2)
        self.layoutWidget5.setGeometry(QtCore.QRect(140, 340, 168, 25))
        self.layoutWidget5.setObjectName("layoutWidget5")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.layoutWidget5)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.sc_frame_back = QtWidgets.QPushButton(self.layoutWidget5)
        self.sc_frame_back.setToolTip("")
        self.sc_frame_back.setAutoRepeat(True)
        self.sc_frame_back.setAutoRepeatInterval(50)
        self.sc_frame_back.setObjectName("sc_frame_back")
        self.horizontalLayout_4.addWidget(self.sc_frame_back)
        self.sc_frame_next = QtWidgets.QPushButton(self.layoutWidget5)
        self.sc_frame_next.setToolTip("")
        self.sc_frame_next.setAutoRepeat(True)
        self.sc_frame_next.setAutoRepeatInterval(50)
        self.sc_frame_next.setObjectName("sc_frame_next")
        self.horizontalLayout_4.addWidget(self.sc_frame_next)
        self.same_frame_check = QtWidgets.QCheckBox(self.tab_2)
        self.same_frame_check.setGeometry(QtCore.QRect(550, 360, 101, 21))
        self.same_frame_check.setToolTip("")
        self.same_frame_check.setObjectName("same_frame_check")
        self.annot_save_button = QtWidgets.QPushButton(self.tab_2)
        self.annot_save_button.setGeometry(QtCore.QRect(660, 360, 211, 23))
        self.annot_save_button.setToolTip("")
        self.annot_save_button.setObjectName("annot_save_button")
        self.layoutWidget6 = QtWidgets.QWidget(self.tab_2)
        self.layoutWidget6.setGeometry(QtCore.QRect(90, 370, 263, 23))
        self.layoutWidget6.setObjectName("layoutWidget6")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.layoutWidget6)
        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.radio_ad = QtWidgets.QRadioButton(self.layoutWidget6)
        self.radio_ad.setChecked(True)
        self.radio_ad.setObjectName("radio_ad")
        self.horizontalLayout_5.addWidget(self.radio_ad)
        self.radio_news = QtWidgets.QRadioButton(self.layoutWidget6)
        self.radio_news.setObjectName("radio_news")
        self.horizontalLayout_5.addWidget(self.radio_news)
        self.radio_program = QtWidgets.QRadioButton(self.layoutWidget6)
        self.radio_program.setObjectName("radio_program")
        self.horizontalLayout_5.addWidget(self.radio_program)
        self.layoutWidget7 = QtWidgets.QWidget(self.tab_2)
        self.layoutWidget7.setGeometry(QtCore.QRect(550, 390, 321, 20))
        self.layoutWidget7.setObjectName("layoutWidget7")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.layoutWidget7)
        self.horizontalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.stream_type_label = QtWidgets.QLabel(self.layoutWidget7)
        self.stream_type_label.setObjectName("stream_type_label")
        self.horizontalLayout_6.addWidget(self.stream_type_label)
        self.stream_feedback_system = QtWidgets.QLabel(self.layoutWidget7)
        self.stream_feedback_system.setToolTip("")
        self.stream_feedback_system.setObjectName("stream_feedback_system")
        self.horizontalLayout_6.addWidget(self.stream_feedback_system)
        self.layoutWidget8 = QtWidgets.QWidget(self.tab_2)
        self.layoutWidget8.setGeometry(QtCore.QRect(550, 420, 321, 20))
        self.layoutWidget8.setObjectName("layoutWidget8")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.layoutWidget8)
        self.horizontalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.brand_type_label = QtWidgets.QLabel(self.layoutWidget8)
        self.brand_type_label.setObjectName("brand_type_label")
        self.horizontalLayout_7.addWidget(self.brand_type_label)
        self.brand_feedback_system = QtWidgets.QLabel(self.layoutWidget8)
        self.brand_feedback_system.setToolTip("")
        self.brand_feedback_system.setObjectName("brand_feedback_system")
        self.horizontalLayout_7.addWidget(self.brand_feedback_system)
        self.layoutWidget9 = QtWidgets.QWidget(self.tab_2)
        self.layoutWidget9.setGeometry(QtCore.QRect(60, 400, 321, 25))
        self.layoutWidget9.setObjectName("layoutWidget9")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout(self.layoutWidget9)
        self.horizontalLayout_8.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.brand_name_label = QtWidgets.QLabel(self.layoutWidget9)
        self.brand_name_label.setObjectName("brand_name_label")
        self.horizontalLayout_8.addWidget(self.brand_name_label)
        self.brand_labeler = QtWidgets.QLineEdit(self.layoutWidget9)
        self.brand_labeler.setToolTip("")
        self.brand_labeler.setObjectName("brand_labeler")
        self.horizontalLayout_8.addWidget(self.brand_labeler)
        self.widget1 = QtWidgets.QWidget(self.tab_2)
        self.widget1.setGeometry(QtCore.QRect(10, 430, 521, 164))
        self.widget1.setObjectName("widget1")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.widget1)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.scbr_head = QtWidgets.QLabel(self.widget1)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.scbr_head.setFont(font)
        self.scbr_head.setObjectName("scbr_head")
        self.verticalLayout_4.addWidget(self.scbr_head)
        self.scbr_head_d1 = QtWidgets.QLabel(self.widget1)
        self.scbr_head_d1.setObjectName("scbr_head_d1")
        self.verticalLayout_4.addWidget(self.scbr_head_d1)
        self.scbr_head_d2 = QtWidgets.QLabel(self.widget1)
        self.scbr_head_d2.setObjectName("scbr_head_d2")
        self.verticalLayout_4.addWidget(self.scbr_head_d2)
        self.scbr_head_d3 = QtWidgets.QLabel(self.widget1)
        self.scbr_head_d3.setObjectName("scbr_head_d3")
        self.verticalLayout_4.addWidget(self.scbr_head_d3)
        self.scbr_head_d4 = QtWidgets.QLabel(self.widget1)
        self.scbr_head_d4.setObjectName("scbr_head_d4")
        self.verticalLayout_4.addWidget(self.scbr_head_d4)
        self.scbr_head_d5 = QtWidgets.QLabel(self.widget1)
        self.scbr_head_d5.setObjectName("scbr_head_d5")
        self.verticalLayout_4.addWidget(self.scbr_head_d5)
        self.scbr_head_d6 = QtWidgets.QLabel(self.widget1)
        self.scbr_head_d6.setObjectName("scbr_head_d6")
        self.verticalLayout_4.addWidget(self.scbr_head_d6)
        self.scbr_head_d7 = QtWidgets.QLabel(self.widget1)
        self.scbr_head_d7.setObjectName("scbr_head_d7")
        self.verticalLayout_4.addWidget(self.scbr_head_d7)
        self.db_connect.addTab(self.tab_2, "")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.current_frame_label_face = QtWidgets.QLabel(self.tab_3)
        self.current_frame_label_face.setGeometry(QtCore.QRect(10, 10, 854, 480))
        self.current_frame_label_face.setMouseTracking(True)
        self.current_frame_label_face.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.current_frame_label_face.setAlignment(QtCore.Qt.AlignCenter)
        self.current_frame_label_face.setObjectName("current_frame_label_face")
        self.layoutWidget10 = QtWidgets.QWidget(self.tab_3)
        self.layoutWidget10.setGeometry(QtCore.QRect(10, 510, 168, 25))
        self.layoutWidget10.setObjectName("layoutWidget10")
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout(self.layoutWidget10)
        self.horizontalLayout_9.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.face_back_button = QtWidgets.QPushButton(self.layoutWidget10)
        self.face_back_button.setObjectName("face_back_button")
        self.horizontalLayout_9.addWidget(self.face_back_button)
        self.face_next_button = QtWidgets.QPushButton(self.layoutWidget10)
        self.face_next_button.setObjectName("face_next_button")
        self.horizontalLayout_9.addWidget(self.face_next_button)
        self.face_annot = QtWidgets.QLineEdit(self.tab_3)
        self.face_annot.setGeometry(QtCore.QRect(190, 510, 451, 23))
        self.face_annot.setObjectName("face_annot")
        self.save_annot_face = QtWidgets.QPushButton(self.tab_3)
        self.save_annot_face.setGeometry(QtCore.QRect(650, 510, 221, 21))
        self.save_annot_face.setObjectName("save_annot_face")
        self.widget2 = QtWidgets.QWidget(self.tab_3)
        self.widget2.setGeometry(QtCore.QRect(10, 540, 556, 143))
        self.widget2.setObjectName("widget2")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.widget2)
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.fd_head = QtWidgets.QLabel(self.widget2)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.fd_head.setFont(font)
        self.fd_head.setObjectName("fd_head")
        self.verticalLayout_5.addWidget(self.fd_head)
        self.fd_head_d1 = QtWidgets.QLabel(self.widget2)
        self.fd_head_d1.setObjectName("fd_head_d1")
        self.verticalLayout_5.addWidget(self.fd_head_d1)
        self.fd_head_d2 = QtWidgets.QLabel(self.widget2)
        self.fd_head_d2.setObjectName("fd_head_d2")
        self.verticalLayout_5.addWidget(self.fd_head_d2)
        self.fd_head_d3 = QtWidgets.QLabel(self.widget2)
        self.fd_head_d3.setObjectName("fd_head_d3")
        self.verticalLayout_5.addWidget(self.fd_head_d3)
        self.fd_head_d4 = QtWidgets.QLabel(self.widget2)
        self.fd_head_d4.setObjectName("fd_head_d4")
        self.verticalLayout_5.addWidget(self.fd_head_d4)
        self.fd_head_d5 = QtWidgets.QLabel(self.widget2)
        self.fd_head_d5.setObjectName("fd_head_d5")
        self.verticalLayout_5.addWidget(self.fd_head_d5)
        self.fd_head_d6 = QtWidgets.QLabel(self.widget2)
        self.fd_head_d6.setObjectName("fd_head_d6")
        self.verticalLayout_5.addWidget(self.fd_head_d6)
        self.db_connect.addTab(self.tab_3, "")
        self.tab_4 = QtWidgets.QWidget()
        self.tab_4.setObjectName("tab_4")
        self.current_frame_label_ticker = QtWidgets.QLabel(self.tab_4)
        self.current_frame_label_ticker.setGeometry(QtCore.QRect(10, 10, 854, 480))
        self.current_frame_label_ticker.setAlignment(QtCore.Qt.AlignCenter)
        self.current_frame_label_ticker.setObjectName("current_frame_label_ticker")
        self.layoutWidget_2 = QtWidgets.QWidget(self.tab_4)
        self.layoutWidget_2.setGeometry(QtCore.QRect(10, 510, 168, 25))
        self.layoutWidget_2.setObjectName("layoutWidget_2")
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout(self.layoutWidget_2)
        self.horizontalLayout_10.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.ticker_back_button = QtWidgets.QPushButton(self.layoutWidget_2)
        self.ticker_back_button.setObjectName("ticker_back_button")
        self.horizontalLayout_10.addWidget(self.ticker_back_button)
        self.ticker_next_button = QtWidgets.QPushButton(self.layoutWidget_2)
        self.ticker_next_button.setObjectName("ticker_next_button")
        self.horizontalLayout_10.addWidget(self.ticker_next_button)
        self.ticker_annot = QtWidgets.QLineEdit(self.tab_4)
        self.ticker_annot.setGeometry(QtCore.QRect(190, 510, 451, 23))
        self.ticker_annot.setObjectName("ticker_annot")
        self.save_annot_ticker = QtWidgets.QPushButton(self.tab_4)
        self.save_annot_ticker.setGeometry(QtCore.QRect(650, 510, 221, 21))
        self.save_annot_ticker.setObjectName("save_annot_ticker")
        self.widget3 = QtWidgets.QWidget(self.tab_4)
        self.widget3.setGeometry(QtCore.QRect(10, 540, 539, 143))
        self.widget3.setObjectName("widget3")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.widget3)
        self.verticalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.ticker_head = QtWidgets.QLabel(self.widget3)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.ticker_head.setFont(font)
        self.ticker_head.setObjectName("ticker_head")
        self.verticalLayout_6.addWidget(self.ticker_head)
        self.ticker_head_d1 = QtWidgets.QLabel(self.widget3)
        self.ticker_head_d1.setObjectName("ticker_head_d1")
        self.verticalLayout_6.addWidget(self.ticker_head_d1)
        self.ticker_head_d2 = QtWidgets.QLabel(self.widget3)
        self.ticker_head_d2.setObjectName("ticker_head_d2")
        self.verticalLayout_6.addWidget(self.ticker_head_d2)
        self.ticker_head_d3 = QtWidgets.QLabel(self.widget3)
        self.ticker_head_d3.setObjectName("ticker_head_d3")
        self.verticalLayout_6.addWidget(self.ticker_head_d3)
        self.ticker_head_d4 = QtWidgets.QLabel(self.widget3)
        self.ticker_head_d4.setObjectName("ticker_head_d4")
        self.verticalLayout_6.addWidget(self.ticker_head_d4)
        self.ticker_head_d5 = QtWidgets.QLabel(self.widget3)
        self.ticker_head_d5.setObjectName("ticker_head_d5")
        self.verticalLayout_6.addWidget(self.ticker_head_d5)
        self.ticker_head_d6 = QtWidgets.QLabel(self.widget3)
        self.ticker_head_d6.setObjectName("ticker_head_d6")
        self.verticalLayout_6.addWidget(self.ticker_head_d6)
        self.db_connect.addTab(self.tab_4, "")

        self.retranslateUi(Dialog)
        self.db_connect.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(Dialog)
        # Initialized backend code for dialog app
        self.connector_tab()
        self.scbr_initial = False
        self.face_initial = False
        self.ticker_initial = False

    def retranslateUi(self, Dialog):
        """
        Layout setting

        Description:
        ============
        This method is used to initialize layout in subject dialog app
        """
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Mediam.ai Annotation Tool"))
        self.label.setText(_translate("Dialog", "Enter Database Address to Connect:"))
        self.addr_label.setText(_translate("Dialog", "IP Address"))
        self.address_bar.setText(_translate("Dialog", "0.0.0.0:27017"))
        self.db_connect_button.setText(_translate("Dialog", "Connect"))
        self.colection_selector_label.setText(_translate("Dialog", "Collection"))
        self.collection_selector_button.setText(_translate("Dialog", "Select"))
        self.channel_selector_label.setText(_translate("Dialog", "Channel"))
        self.annot_starter.setText(_translate("Dialog", "Start Annotation"))
        self.db_connect_meta_label.setText(_translate("Dialog", "Database Connection Status"))
        self.db_meta_label.setText(_translate("Dialog", "Database Connected Name"))
        self.db_meta_collection_label.setText(_translate("Dialog", "Database Connected Collection"))
        self.de_meta_channel_label.setText(_translate("Dialog", "Annotation Channel"))
        self.db_connect_meta_status.setText(_translate("Dialog", "Not Connected"))
        self.db_meta_name.setText(_translate("Dialog", "Unknown"))
        self.db_meta_collection.setText(_translate("Dialog", "Unknown"))
        self.db_meta_channel.setText(_translate("Dialog", "Unknown"))
        self.connector_heading.setText(_translate("Dialog", "Connect to Database"))
        self.connector_head_d1.setText(_translate("Dialog", "First you need to connect with Database. Follow the following steps to start annotation:"))
        self.connector_head_d2.setText(_translate("Dialog", "1. Enter IP address of Database and press Connect button."))
        self.connector_head_d3.setText(_translate("Dialog", "2. Select collection from given list and press Select button."))
        self.connector_head_d4.setText(_translate("Dialog", "3. Select channel from the given list and press Start Annotation button."))
        self.label_2.setText(_translate("Dialog", "4. Head over to respective tab to start annotation."))
        self.db_connect.setTabText(self.db_connect.indexOf(self.tab), _translate("Dialog", "Connect"))
        self.current_frame_label.setText(_translate("Dialog", "Current Frame"))
        self.feedback_frame_label.setText(_translate("Dialog", "System Feedback"))
        self.sc_frame_back.setText(_translate("Dialog", "Back"))
        self.sc_frame_next.setText(_translate("Dialog", "Next"))
        self.same_frame_check.setText(_translate("Dialog", "Same Frame"))
        self.annot_save_button.setText(_translate("Dialog", "Save Annotation"))
        self.radio_ad.setText(_translate("Dialog", "Advertisement"))
        self.radio_news.setText(_translate("Dialog", "News"))
        self.radio_program.setText(_translate("Dialog", "Program"))
        self.stream_type_label.setText(_translate("Dialog", "Stream Type:"))
        self.stream_feedback_system.setText(_translate("Dialog", "System SC Feed"))
        self.brand_type_label.setText(_translate("Dialog", "Brand:"))
        self.brand_feedback_system.setText(_translate("Dialog", "System BR Feed"))
        self.brand_name_label.setText(_translate("Dialog", "Brand Name"))
        self.scbr_head.setText(_translate("Dialog", "Stream Classification & Brand Recognition Annotation"))
        self.scbr_head_d1.setText(_translate("Dialog", "Following steps should be followed for Stream Classification & Brand Recognition:"))
        self.scbr_head_d2.setText(_translate("Dialog", "1. Use Next & Back button to propagate through stream."))
        self.scbr_head_d3.setText(_translate("Dialog", "2. Use radio buttons to classify stream classification."))
        self.scbr_head_d4.setText(_translate("Dialog", "3. If Advertisement, plase fill Brand Name Section."))
        self.scbr_head_d5.setText(_translate("Dialog", "4. Feel free to use slider to evaluate system feedback."))
        self.scbr_head_d6.setText(_translate("Dialog", "5. If system feedback and current frame is same, please mark Same Frame checkbox."))
        self.scbr_head_d7.setText(_translate("Dialog", "6. After you done for current session, please press Save Annotation button."))
        self.db_connect.setTabText(self.db_connect.indexOf(self.tab_2), _translate("Dialog", "SCBR"))
        self.current_frame_label_face.setText(_translate("Dialog", "Current Frame"))
        self.face_back_button.setText(_translate("Dialog", "Back"))
        self.face_next_button.setText(_translate("Dialog", "Next"))
        self.save_annot_face.setText(_translate("Dialog", "Save Annotation"))
        self.fd_head.setText(_translate("Dialog", "Face Detection & Recognition Annotation"))
        self.fd_head_d1.setText(_translate("Dialog", "Following steps should be followed for Face Detection & Recognition:"))
        self.fd_head_d2.setText(_translate("Dialog", "1. Use Next & Back button to propagate through stream."))
        self.fd_head_d3.setText(_translate("Dialog", "2. Draw a box over face area."))
        self.fd_head_d4.setText(_translate("Dialog", "3. Write name for respective face in the given space."))
        self.fd_head_d5.setText(_translate("Dialog", "4. Iteratively draw boxes and write respective names until you are done with current frame."))
        self.fd_head_d6.setText(_translate("Dialog", "5. After you done for current session, please press Save Annotation button."))
        self.db_connect.setTabText(self.db_connect.indexOf(self.tab_3), _translate("Dialog", "Face Detection"))
        self.current_frame_label_ticker.setText(_translate("Dialog", "Current Frame"))
        self.ticker_back_button.setText(_translate("Dialog", "Back"))
        self.ticker_next_button.setText(_translate("Dialog", "Next"))
        self.save_annot_ticker.setText(_translate("Dialog", "Save Annotation"))
        self.ticker_head.setText(_translate("Dialog", "Text Detection & Recognition Annotation"))
        self.ticker_head_d1.setText(_translate("Dialog", "Following steps should be followed for Ticker Detection & Recognition:"))
        self.ticker_head_d2.setText(_translate("Dialog", "1. Use Next & Back button to propagate through stream."))
        self.ticker_head_d3.setText(_translate("Dialog", "2. Draw a box over text area."))
        self.ticker_head_d4.setText(_translate("Dialog", "3. Write text for respective text in the given space."))
        self.ticker_head_d5.setText(_translate("Dialog", "4. Iteratively draw boxes and write respective text until you are done with current frame."))
        self.ticker_head_d6.setText(_translate("Dialog", "5. After you done for current session, please press Save Annotation button."))
        self.db_connect.setTabText(self.db_connect.indexOf(self.tab_4), _translate("Dialog", "Ticker Detection"))
    
    def mouseMoveEvent(self, event):
        """
        Mouse Move Event

        Description:
        ============
        This method executes when mouse is dragged with button pressed
        """
        if ((self.face_initial == True) and (self.db_connect.currentIndex() == 2)):
            curr_coords = self.get_coord(event)
            coords = (self.starter_coord[0], self.starter_coord[1], curr_coords[0], curr_coords[1])
            self.current_frame_label_face.setPixmap(self.pixmap_face.copy())
            temp_map = self.draw_rectangle(self.pixmap_face.copy(), coords)
            self.current_frame_label_face.setPixmap(temp_map)
        if ((self.ticker_initial == True) and (self.db_connect.currentIndex() == 3)):
            curr_coords = self.get_coord(event)
            coords = (self.starter_coord[0], self.starter_coord[1], curr_coords[0], curr_coords[1])
            self.current_frame_label_ticker.setPixmap(self.pixmap_ticker.copy())
            temp_map = self.draw_rectangle(self.pixmap_ticker.copy(), coords)
            self.current_frame_label_ticker.setPixmap(temp_map)
                
    def mousePressEvent(self, event):
        """
        Mouse Button Press Event

        Description:
        ============
        This method executes when mouse button is pressed, after mouse button is released
        """
        _translate = QtCore.QCoreApplication.translate
        if ((self.face_initial == True) and (self.db_connect.currentIndex() == 2)):
            self.face_annots_list.append(self.face_annotation)
            self.starter_coord = self.get_coord(event)
            self.face_annot.setText(_translate("Dialog", ""))
        if ((self.ticker_initial == True) and (self.db_connect.currentIndex() == 3)):
            self.ticker_annots_list.append(self.ticker_annotation)
            self.starter_coord = self.get_coord(event)
            self.ticker_annot.setText(_translate("Dialog", ""))
    
    def mouseReleaseEvent(self, event):
        """
        Mouse Button Release Event

        Description:
        ============
        This method executes when mouse button is released, after mouse button is pressed
        """
        if ((self.face_initial == True) and (self.db_connect.currentIndex() == 2)):
            curr_coords = self.get_coord(event)
            coords = (self.starter_coord[0], self.starter_coord[1], curr_coords[0], curr_coords[1])
            temp_map = self.draw_rectangle(self.pixmap_face, coords)
            self.current_frame_label_face.setPixmap(temp_map)
            self.face_coords_list.append(coords)
        if ((self.ticker_initial == True) and (self.db_connect.currentIndex() == 3)):
            curr_coords = self.get_coord(event)
            coords = (self.starter_coord[0], self.starter_coord[1], curr_coords[0], curr_coords[1])
            temp_map = self.draw_rectangle(self.pixmap_ticker, coords)
            self.current_frame_label_ticker.setPixmap(temp_map)
            self.ticker_coords_list.append(coords)

    def get_face_annot_data(self, dat):
        """
        Face Annotation Recognition Data

        Description:
        ============
        This method executes when typed something in face recognition field
        """
        self.face_annotation = dat
    
    def get_ticker_annot_data(self, dat):
        """
        Ticker Annotation Recognition Data

        Description:
        ============
        This method executes when typed something in ticker recognition field
        """
        self.ticker_annotation = dat

    def get_coord(self, event):
        """
        Get mouse coordinates

        Description:
        ============
        This method is used to get mouse coordinates in ticker and face region
        """
        if ((self.db_connect.currentIndex()==2) or (self.db_connect.currentIndex()==3)):
            if self.face_initial == True:
                curr_coords = (event.pos().x()-self.face_x1, event.pos().y()-self.face_y1)
                if (curr_coords[0] >= 0) and (curr_coords[1] >= 0) and (curr_coords[0] <= self.face_x2) and (curr_coords[1] <= self.face_y2):
                    return curr_coords
                else:
                    return (0, 0)
            if self.ticker_initial == True:
                curr_coords = (event.pos().x()-self.ticker_x1, event.pos().y()-self.ticker_y1)
                if (curr_coords[0] >= 0) and (curr_coords[1] >= 0) and (curr_coords[0] <= self.ticker_x2) and (curr_coords[1] <= self.ticker_y2):
                    return curr_coords
                else:
                    return (0, 0)
        else:
            return (0, 0)
        
    def draw_rectangle(self, pixmap, coords):
        """
        Rectangle drawing on frame using mouse

        Description:
        ============
        This method is used to draw rectangles on frames using mouse
        """
        painter = QtGui.QPainter(pixmap)
        pen = QtGui.QPen(QtCore.Qt.green)
        pen.setWidth(2)
        painter.setPen(pen)
        painter.drawRect(coords[0], coords[1], coords[2]-coords[0], coords[3]-coords[1])
        return pixmap
    
    def draw_face_ticker(self, pixmap, coords, infer, landmarks = None):
        """
        Inference drawing on Face and Ticker frames

        Description:
        ============
        This method is used to draw and display inference face & ticker detection & recognition
        """
        painter = QtGui.QPainter(pixmap)
        pen = QtGui.QPen(QtCore.Qt.red)
        pen.setWidth(2)
        painter.setPen(pen)
        font = QtGui.QFont()
        font.setFamily('Times')
        font.setBold(True)
        font.setPointSize(10)
        painter.setFont(font)
        coords = ast.literal_eval(coords)
        infer = ast.literal_eval(infer)
        if self.face_initial == True:
            landmarks = ast.literal_eval(landmarks)
            for i, j, k in zip(coords, infer, landmarks):
                painter.drawPoint(int(k[0]), int(k[5]))
                painter.drawPoint(int(k[1]), int(k[6]))
                painter.drawPoint(int(k[2]), int(k[7]))
                painter.drawPoint(int(k[3]), int(k[8]))
                painter.drawPoint(int(k[4]), int(k[9]))
                painter.drawText(int(i[0]), int(i[1])-10, j)
                painter.drawRect(int(i[0]), int(i[1]), int(i[2])-int(i[0]), int(i[3])-int(i[1]))
        if self.ticker_initial == True:
            for i, j in zip(coords, infer):
                painter.drawText(int(i[0][0]), int(i[0][1])-10, j)
                painter.drawRect(int(i[0][0]), int(i[0][1]), int(i[2][0])-int(i[0][0]), int(i[2][1])-int(i[0][1]))
        return pixmap

    def annot_saver_brand(self):
        """
        Annotation saver for stream classification & brand recognition

        Description:
        ============
        This method executes when Save Annotation button is pressed in SCBR tab
        """
        if self.scbr_initial == True:
            if self.scbr_annotation_done == False:
                _translate = QtCore.QCoreApplication.translate
                self.annot_save_button.setText(_translate("Dialog", "Annotation Saved"))
                for i in self.scbr_annotated_dataset:
                    self.current_col_obj.update_one({'_id': i['_id']}, {"$set": {'brsStatus': 0, 'scStatus': 0, 'annotStream': i['annotStream'], 'annotBrand': i['annotBrand'], 'sameFrame': i['sameFrame']}})
                self.scbr_annotation_done = True
    
    def annot_saver_face(self):
        """
        Annotation saver for face detection & recognition

        Description:
        ============
        This method executes when Save Annotation button is pressed in Face Detection tab
        """
        if self.face_initial == True:
            if self.face_annotation_done == False:
                _translate = QtCore.QCoreApplication.translate
                self.save_annot_face.setText(_translate("Dialog", "Annotation Saved"))
                for i in self.face_annotated_dataset:
                    self.current_col_obj.update_one({'_id': i['_id']}, {"$set": {'frsStatus': 0, 'annotCoordinates': i['annotCoordinates'], 'annotLabels': i['annotLabels']}})
                self.face_annotation_done = True
    
    def annot_saver_ticker(self):
        """
        Annotation saver for ticker detection & recognition

        Description:
        ============
        This method executes when Save Annotation button is pressed in Ticker Detection tab
        """
        if self.ticker_initial == True:
            if self.ticker_annotation_done == False:
                _translate = QtCore.QCoreApplication.translate
                self.save_annot_ticker.setText(_translate("Dialog", "Annotation Saved"))
                for i in self.ticker_annotated_dataset:
                    self.current_col_obj.update_one({'_id': i['_id']}, {"$set": {'trsStatus': 0, 'annotCoordinates': i['annotCoordinates'], 'annotLabels': i['annotLabels']}})
                self.face_annotation_done = True

    def ticker_tab(self):
        """
        Ticker tab initialization

        Description:
        ============
        This method is used to initialize Ticker Detection tab
        """
        self.lenner, self.max_lenner = 0, len(self.dataset)-1
        self.ticker_x1, self.ticker_y1 = 20, 48
        self.ticker_x2, self.ticker_y2 = 854, 480
        self.ticker_initial = True
        self.ticker_next_button.clicked.connect(self.sc_next_presser)
        self.ticker_back_button.clicked.connect(self.sc_back_presser)
        self.ticker_annot.textChanged.connect(self.get_ticker_annot_data)
        _translate = QtCore.QCoreApplication.translate
        self.ticker_annot.setText(_translate("Dialog", ""))
        self.ticker_annotation = ''
        self.ticker_coords_list, self.ticker_annots_list = list(), list()
        self.save_annot_ticker.clicked.connect(self.annot_saver_ticker)
        self.ticker_annotated_dataset = list()
        self.ticker_annotation_done = False

    def face_tab(self):
        """
        Face tab initialization

        Description:
        ============
        This method is used to initialize Face Detection tab
        """
        self.lenner, self.max_lenner = 0, len(self.dataset)-1
        self.face_x1, self.face_y1 = 20, 48
        self.face_x2, self.face_y2 = 854, 480
        self.face_initial = True
        self.face_next_button.clicked.connect(self.sc_next_presser)
        self.face_back_button.clicked.connect(self.sc_back_presser)
        self.face_annot.textChanged.connect(self.get_face_annot_data)
        _translate = QtCore.QCoreApplication.translate
        self.face_annot.setText(_translate("Dialog", ""))
        self.face_annotation = ''
        self.face_coords_list, self.face_annots_list = list(), list()
        self.save_annot_face.clicked.connect(self.annot_saver_face)
        self.face_annotated_dataset = list()
        self.face_annotation_done = False

    def scbr_tab(self):
        """
        Stream Classification & Brand Recognition tab initialization

        Description:
        ============
        This method is used to initialize SCBR tab
        """
        self.lenner, self.max_lenner = 0, len(self.dataset)-1
        self.sc_frame_next.clicked.connect(self.sc_next_presser)
        self.sc_frame_back.clicked.connect(self.sc_back_presser)
        self.radio_ad.btn_dat = 'Advertisement'
        self.radio_news.btn_dat = 'News'
        self.radio_program.btn_dat = 'Program'
        self.radio_ad.pressed.connect(self.radio_presser)
        self.radio_news.pressed.connect(self.radio_presser)
        self.radio_program.pressed.connect(self.radio_presser)
        self.curr_radio = self.radio_ad.btn_dat
        self.brand_labeler_deleted = False
        self.brand_labeler_txt = ''
        self.brand_labeler.textChanged.connect(self.get_brand_dat)
        self.sys_feed_compare = False
        self.slider_val_percentage = 0
        self.feedback_slider.sliderMoved.connect(self.slider_val)
        self.same_frame_check.toggled.connect(self.feed_compare)
        self.annot_save_button.clicked.connect(self.annot_saver_brand)
        self.scbr_annotated_dataset = list()
        self.scbr_initial = True
        self.scbr_annotation_done = False
    
    def sc_next_presser(self):
        """
        Next button for stream propagation

        Description:
        ============
        This method executes when Next button is pressed to propagate stream
        """
        _translate = QtCore.QCoreApplication.translate
        current_annotation = dict()
        current_stream_data = self.dataset.iloc[self.lenner]
        if self.scbr_initial == True:
            feed_compare = self.sys_feed_compare if self.curr_radio == self.radio_ad.btn_dat else False
            current_annotation['_id'] = current_stream_data['_id']
            current_annotation['annotStream'] = self.curr_radio
            current_annotation['annotBrand'] = self.brand_labeler_txt
            current_annotation['sameFrame'] = str(feed_compare)
            self.scbr_annotated_dataset.append(current_annotation)
        if self.face_initial == True:
            if len(self.face_annots_list) != 0:
                del self.face_annots_list[0]
                self.face_annots_list.append(self.face_annotation)
            current_annotation['_id'] = current_stream_data['_id']
            current_annotation['annotCoordinates'] =  [[i[0], i[1], i[2], i[3]] for i in self.face_coords_list]
            current_annotation['annotLabels'] = self.face_annots_list
            self.face_annotated_dataset.append(current_annotation)
        if self.ticker_initial == True:
            if len(self.ticker_annots_list) != 0:
                del self.ticker_annots_list[0]
                self.ticker_annots_list.append(self.ticker_annotation)
            current_annotation['_id'] = current_stream_data['_id']
            current_annotation['annotCoordinates'] = [[[i[0], i[1]], [i[2], i[1]], [i[2], i[3]], [i[0], i[3]]] for i in self.ticker_coords_list]
            current_annotation['annotLabels'] = self.ticker_annots_list
            self.ticker_annotated_dataset.append(current_annotation)
        if self.lenner >= self.max_lenner:
            self.lenner = self.max_lenner
        else:
            self.lenner += 1
        current_stream_data = self.dataset.iloc[self.lenner]
        pixmap_main = QtGui.QPixmap(current_stream_data['filePath'])
        if self.scbr_initial == True:
            self.pixmap_stream = pixmap_main.scaled(420, 315)
            self.current_frame_label.setPixmap(self.pixmap_stream)
            self.stream_feedback_system.setText(_translate("Dialog", current_stream_data['scInfer']))
            self.brand_feedback_system.setText(_translate("Dialog", current_stream_data['brsInfer'].split("\"")[1]))
        if self.face_initial == True:
            pixmap_main = self.draw_face_ticker(pixmap_main.copy(), current_stream_data['faceBoundingBoxCoordinates'], current_stream_data['frsInfer'], current_stream_data['faceLandmarks'])
            self.pixmap_face = pixmap_main.scaled(854, 480)
            self.current_frame_label_face.setPixmap(self.pixmap_face)
            self.face_coords_list, self.face_annots_list = list(), list()
            self.face_annot.setText(_translate("Dialog", ""))
        if self.ticker_initial == True:
            pixmap_main = self.draw_face_ticker(pixmap_main.copy(), current_stream_data['trsBoundingBoxCoordinates'], current_stream_data['trsInfer'])
            self.pixmap_ticker = pixmap_main.scaled(854, 480)
            self.current_frame_label_ticker.setPixmap(self.pixmap_ticker)
            self.ticker_coords_list, self.ticker_annots_list = list(), list()
            self.ticker_annot.setText(_translate("Dialog", ""))
    
    def sc_back_presser(self):
        """
        Back button for stream propagation

        Description:
        ============
        This method executes when Back button is pressed to propagate stream
        """
        _translate = QtCore.QCoreApplication.translate
        if self.lenner <= 0:
            self.lenner = 0
        else:
            self.lenner -= 1
        current_stream_data = self.dataset.iloc[self.lenner]
        pixmap_main = QtGui.QPixmap(current_stream_data['filePath'])
        if self.scbr_initial == True:
            self.pixmap_stream = pixmap_main.scaled(420, 315)
            self.current_frame_label.setPixmap(self.pixmap_stream)
            self.stream_feedback_system.setText(_translate("Dialog", current_stream_data['scInfer']))
            self.brand_feedback_system.setText(_translate("Dialog", current_stream_data['brsInfer'].split("\"")[1]))
            if len(self.scbr_annotated_dataset)!=0:
                self.scbr_annotated_dataset.pop()
        if self.face_initial == True:
            pixmap_main = self.draw_face_ticker(pixmap_main.copy(), current_stream_data['faceBoundingBoxCoordinates'], current_stream_data['frsInfer'], current_stream_data['faceLandmarks'])
            self.pixmap_face = pixmap_main.scaled(854, 480)
            self.current_frame_label_face.setPixmap(self.pixmap_face)
            self.face_coords_list, self.face_annots_list = list(), list()
            self.face_annot.setText(_translate("Dialog", ""))
            if len(self.face_annotated_dataset)!=0:
                self.face_annotated_dataset.pop()
        if self.ticker_initial == True:
            pixmap_main = self.draw_face_ticker(pixmap_main.copy(), current_stream_data['trsBoundingBoxCoordinates'], current_stream_data['trsInfer'])
            self.pixmap_ticker = pixmap_main.scaled(854, 480)
            self.current_frame_label_ticker.setPixmap(self.pixmap_ticker)
            self.ticker_coords_list, self.ticker_annots_list = list(), list()
            self.ticker_annot.setText(_translate("Dialog", ""))
            if len(self.ticker_annotated_dataset)!=0:
                self.ticker_annotated_dataset.pop()

    def radio_presser(self):
        """
        Radio button in SCBR tab

        Description:
        ============
        This method executes when radio button is pressed in SCBR tab
        """
        out = self.sender()
        self.curr_radio = out.btn_dat
        _translate = QtCore.QCoreApplication.translate
        self.brand_labeler_txt = ''
        self.brand_labeler.setText(_translate("Dialog", ""))
    
    def get_brand_dat(self, dat):
        """
        Brand data recorder

        Description:
        ============
        This method is used to get annotated brand label in SCBR tab
        """
        if self.curr_radio == self.radio_ad.btn_dat:
            self.brand_labeler_txt = dat
        else:
            self.brand_labeler_txt = ''

    def feed_compare(self, dat):
        """
        Checkbox for current & system feedback comparison

        Description:
        ============
        This method is executes when checkbox is changed in SCBR tab for comparison
        """
        self.sys_feed_compare = dat
    
    def slider_val(self, dat):
        """
        Slider to check system feedback in SCBR tab

        Description:
        ============
        This method executes when slider is changed in SCBR tab
        """
        self.slider_val_percentage = dat

    def connector_tab(self):
        """
        Connector tab initialization

        Description:
        ============
        This method is used to initialize database Connector tab
        """
        _translate = QtCore.QCoreApplication.translate
        self.db_connect_addr_ip = '0.0.0.0:27017'
        self.db_connect.setCurrentIndex(0)
        self.address_bar.setText(_translate("Dialog", self.db_connect_addr_ip))
        self.address_bar.textChanged.connect(self.get_connector_ip)
        self.connect_status = False
        self.db_connect_button.clicked.connect(self.connect_pressed)
        self.col_selector_status = False
        self.collection_selector_button.clicked.connect(self.selector_button)
        self.collection_selector_combo.currentTextChanged.connect(self.get_combo_data)
        self.channel_combo_status = False
        self.channel_selector_combo.currentTextChanged.connect(self.get_channel_combo_data)
        self.annot_starter.clicked.connect(self.annot_starter_button)
        self.annotation_started = False
        self.db_connect_meta_status.setStyleSheet("color: red;")
        self.db_meta_name.setStyleSheet("color: red;")
        self.db_meta_collection.setStyleSheet("color: red;")
        self.db_meta_channel.setStyleSheet("color: red;")
    
    def get_connector_ip(self, dat):
        """
        Data recorder for connector tab ip

        Description:
        ============
        This method executes when user enters something in ip field for databse connection
        """
        if self.connect_status==False:
            self.db_connect_addr_ip = dat
    
    def get_combo_data(self, dat):
        """
        Data recorder for collection selection in subject database

        Description:
        ============
        This method executes when user selects something from collection for subject annotation
        """
        if self.col_selector_status == False:
            self.current_col = dat
    
    def get_channel_combo_data(self, dat):
        """
        Data recorder for channel selection in subject collection

        Description:
        ============
        This method executes when user selects somthing from channel for subject annotation
        """
        if self.channel_combo_status == False:
            self.current_channel = dat
    
    def connect_pressed(self):
        """
        Connect button for database connection

        Description:
        ============
        This method executes when Connect button is pressed in Connector tab to connect with database on ip
        """
        if self.connect_status==False:
            load_db_name = 'brs' # Target Database on MongoDB
            self.connect_status = True
            _translate = QtCore.QCoreApplication.translate
            self.db_connect_button.setText(_translate("Dialog", "Connected"))
            self.db_connect_meta_status.setText(_translate("Dialog", "Connected"))
            self.db_connect_meta_status.setStyleSheet("color: green;")
            self.db_meta_name.setText(_translate("Dialog", load_db_name))
            self.db_meta_name.setStyleSheet("color: green;")
            self.client = MongoClient(self.db_connect_addr_ip.split(':')[0], int(self.db_connect_addr_ip.split(':')[-1]))
            self.current_db_obj = self.client[load_db_name]
            col_list = self.current_db_obj.list_collection_names()
            for i in range(len(col_list)):
                self.collection_selector_combo.addItem("")
                self.collection_selector_combo.setItemText(i, _translate("Dialog", col_list[i]))

    def selector_button(self):
        """
        Select button for database connection

        Description:
        ============
        This method executes when Select button is pressed in Connector tab to choose collection from database
        """
        if (self.connect_status==True and self.col_selector_status==False):
            self.col_selector_status = True
            _translate = QtCore.QCoreApplication.translate
            self.collection_selector_button.setText(_translate("Dialog", "Selected"))
            self.db_meta_collection.setText(_translate("Dialog", self.current_col))
            self.db_meta_collection.setStyleSheet("color: green;")
            self.current_col_obj = self.current_db_obj[self.current_col]
            self.dataset = [i for i in self.current_col_obj.find({})]
            self.dataset = pd.DataFrame(self.dataset)
            self.dataset['timestamp'] = pd.to_datetime(self.dataset['timestamp'], format="%Y-%m-%d %H:%M:%S.%f")
            self.dataset.sort_values(by='timestamp', ascending=True)
            chan_list = self.dataset['channelName'].unique().tolist()
            for i in range(len(chan_list)):
                self.channel_selector_combo.addItem("")
                self.channel_selector_combo.setItemText(i, _translate("Dialog", chan_list[i]))
    
    def annot_starter_button(self):
        """
        Annotation Start button for database connection

        Description:
        ============
        This method executes when Start Annotation button is pressed in Connector tab to choose channel from collection
        """
        if (self.connect_status==True and self.col_selector_status==True and self.channel_combo_status==False):
            self.channel_combo_status = True
            _translate = QtCore.QCoreApplication.translate
            self.annot_starter.setText(_translate("Dialog", "Annotation Started"))
            self.db_meta_channel.setText(_translate("Dialog", self.current_channel))
            self.db_meta_channel.setStyleSheet("color: green;")
            try:
                self.dataset = self.dataset.loc[(self.dataset['channelName'] == self.current_channel) & ((self.dataset['scStatus'] == 1) | (self.dataset['brsStatus'] == 1))]
                self.scbr_tab()
            except:
                try:
                    self.dataset = self.dataset.loc[(self.dataset['channelName'] == self.current_channel) & (self.dataset['frsStatus'] == 1)]
                    self.face_tab()
                except:
                    self.dataset = self.dataset.loc[(self.dataset['channelName'] == self.current_channel) & (self.dataset['trsStatus'] == 1)]
                    self.ticker_tab()
            _translate = QtCore.QCoreApplication.translate
            current_stream_data = self.dataset.iloc[self.lenner]
            pixmap_main = QtGui.QPixmap(current_stream_data['filePath'])
            if self.scbr_initial == True:
                self.pixmap_stream = pixmap_main.scaled(420, 315)
                self.current_frame_label.setPixmap(self.pixmap_stream)
                self.stream_feedback_system.setText(_translate("Dialog", current_stream_data['scInfer']))
                self.brand_feedback_system.setText(_translate("Dialog", current_stream_data['brsInfer'].split("\"")[1]))
            if self.face_initial == True:
                pixmap_main = self.draw_face_ticker(pixmap_main.copy(), current_stream_data['faceBoundingBoxCoordinates'], current_stream_data['frsInfer'], current_stream_data['faceLandmarks'])
                self.pixmap_face = pixmap_main.scaled(854, 480)
                self.current_frame_label_face.setPixmap(self.pixmap_face)
                self.face_annot.setText(_translate("Dialog", ""))
            if self.ticker_initial == True:
                pixmap_main = self.draw_face_ticker(pixmap_main.copy(), current_stream_data['trsBoundingBoxCoordinates'], current_stream_data['trsInfer'])
                self.pixmap_ticker = pixmap_main.scaled(854, 480)
                self.current_frame_label_ticker.setPixmap(self.pixmap_ticker)
                self.ticker_annot.setText(_translate("Dialog", ""))

class main_window(QtWidgets.QMainWindow, Ui_Dialog):
    def __init__(self):
        """
        Class for dialog display

        Description:
        ============
        This method initialize display for annotation tool
        """
        super().__init__()
        self.setupUi(self)

if __name__=='__main__':
    app = QtWidgets.QApplication([])
    window = main_window()
    window.show()
    app.exec()
